const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
require('dotenv').config();

const token = process.env.BOT_TOKEN;
const port = process.env.PORT || 3000;

const bot = new TelegramBot(token, { polling: false });
const app = express();

app.use(express.json());

// CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Vercel
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ: token -> {userId, username, phone, expires}
const linkTokens = new Map();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ: telegramId -> {username, phone, userId}
const telegramUsers = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
function generateLinkToken() {
  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// Webhook –¥–ª—è Telegram
app.post(`/webhook/${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// API –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Å–∞–π—Ç–∞)
app.post('/api/link-user', (req, res) => {
  const { userId, username, phone } = req.body;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
  const token = generateLinkToken();
  const expires = Date.now() + 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  
  linkTokens.set(token, { userId, username, phone, expires });
  
  res.json({ 
    success: true, 
    token,
    botUrl: `https://t.me/${process.env.BOT_USERNAME}?start=${token}`,
    message: `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É: /start ${token}`
  });
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/notify-user', (req, res) => {
  const { userId, message } = req.body;
  
  // –ò—â–µ–º telegramId –ø–æ userId
  let telegramId = null;
  for (const [tgId, userData] of telegramUsers.entries()) {
    if (userData.userId === userId) {
      telegramId = tgId;
      break;
    }
  }
  
  if (!telegramId) {
    return res.status(404).json({ error: 'User not linked to Telegram' });
  }

  bot.sendMessage(telegramId, message)
    .then(() => res.json({ success: true }))
    .catch(err => res.status(500).json({ error: err.message }));
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
app.get('/api/link-status/:userId', (req, res) => {
  const { userId } = req.params;
  
  // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const [tgId, userData] of telegramUsers.entries()) {
    if (userData.userId === parseInt(userId)) {
      return res.json({ 
        linked: true, 
        telegramId: tgId,
        username: userData.username,
        phone: userData.phone
      });
    }
  }
  
  res.json({ linked: false });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ç–æ–∫–µ–Ω–æ–º
bot.onText(/\/start(?:\s+(.+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const telegramUsername = msg.from.username;
  const firstName = msg.from.first_name;
  const token = match[1];
  
  if (token) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const linkData = linkTokens.get(token);
    
    if (!linkData) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ–± –æ—à–∏–±–∫–µ
      fetch('https://rental-crm-frontend-po2rt7ktx-sw37bks-projects.vercel.app/api/telegram-link-callback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ success: false, error: 'invalid_token' })
      }).catch(console.error);
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è');
    }
    
    if (linkData.expires < Date.now()) {
      linkTokens.delete(token);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –æ–± –æ—à–∏–±–∫–µ
      fetch('https://rental-crm-frontend-po2rt7ktx-sw37bks-projects.vercel.app/api/telegram-link-callback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ success: false, error: 'token_expired' })
      }).catch(console.error);
      return bot.sendMessage(chatId, '‚ùå –¢–æ–∫–µ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ');
    }
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    telegramUsers.set(chatId.toString(), {
      userId: linkData.userId,
      username: linkData.username,
      phone: linkData.phone,
      telegramUsername: telegramUsername,
      firstName: firstName
    });
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    linkTokens.delete(token);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ —Å–∞–π—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏
    fetch('https://rental-crm-frontend-po2rt7ktx-sw37bks-projects.vercel.app/api/telegram-link-callback', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        success: true,
        userId: linkData.userId,
        telegramId: chatId.toString(),
        username: linkData.username,
        phone: linkData.phone,
        telegramUsername: telegramUsername,
        firstName: firstName
      })
    }).catch(console.error);
    
    bot.sendMessage(chatId, `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –†–µ–Ω—Ç–æ–ª–æ–≥–∏—è!
    
üîó –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:
${telegramUsername ? `Telegram: @${telegramUsername}` : `–ò–º—è: ${firstName}`}
–°–∞–π—Ç: ID ${linkData.userId}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ù–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
‚Ä¢ –û—Ç–º–µ–Ω–∞—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–∞—Ö`);
    
    console.log(`User linked: ${linkData.userId} -> ${chatId}`);
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ
    const userData = telegramUsers.get(chatId.toString());
    if (userData) {
      return bot.sendMessage(chatId, `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω (ID: ${userData.userId})`);
    }
    
    bot.sendMessage(chatId, `üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ–Ω—Ç–æ–ª–æ–≥–∏—è!

‚ùå –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:
1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ
2. –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å Telegram"
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  const userData = telegramUsers.get(chatId.toString());
  
  if (userData) {
    bot.sendMessage(chatId, `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
    
üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑–∏:
–°–∞–π—Ç: ID ${userData.userId}
${userData.username ? `–ù–∏–∫–Ω–µ–π–º: ${userData.username}` : ''}
${userData.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${userData.phone}` : ''}
Telegram: ${userData.telegramUsername ? `@${userData.telegramUsername}` : userData.firstName}`);
  } else {
    bot.sendMessage(chatId, `‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    
–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:
1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ
2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram –¥–∞–Ω–Ω—ã–µ
3. –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
4. –ù–∞–ø–∏—à–∏—Ç–µ /start`);
  }
});

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
setInterval(() => {
  const now = Date.now();
  for (const [token, data] of linkTokens.entries()) {
    if (data.expires < now) {
      linkTokens.delete(token);
    }
  }
}, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    linkedUsers: telegramUsers.size,
    pendingTokens: linkTokens.size
  });
});

app.listen(port, () => {
  console.log(`Bot server running on port ${port}`);
});
